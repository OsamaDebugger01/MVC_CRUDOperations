// <auto-generated />
using System;
using MVC_CRUDOperations.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCCRUDOperations.Migrations
{
    [DbContext(typeof(MVC_CRUD_dbc))]
    partial class MVCCRUDdbcModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVC_CRUDOperations.Models.Department", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Number");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.DepartmentLocations", b =>
                {
                    b.Property<int?>("Dept_Number")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Dept_Number");

                    b.ToTable("DepartmentLocations");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Dependent", b =>
                {
                    b.Property<string>("name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Emp_ssn")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("name");

                    b.HasIndex("Emp_ssn");

                    b.ToTable("dependents");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Employee", b =>
                {
                    b.Property<int>("Ssn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ssn"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Bdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Mname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("Salary");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("SuperID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Ssn");

                    b.HasIndex("SuperID");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Project", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name", "Number");

                    b.HasIndex("Number");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Work_For", b =>
                {
                    b.Property<int>("Proj_number")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Emp_ssn")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("employeeSsn")
                        .HasColumnType("int");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("projectNumber")
                        .HasColumnType("int");

                    b.HasKey("Proj_number", "Emp_ssn");

                    b.HasIndex("employeeSsn");

                    b.HasIndex("projectName", "projectNumber");

                    b.ToTable("Work_For");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.DepartmentLocations", b =>
                {
                    b.HasOne("MVC_CRUDOperations.Models.Department", "department")
                        .WithMany("department_locations")
                        .HasForeignKey("Dept_Number")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Dependent", b =>
                {
                    b.HasOne("MVC_CRUDOperations.Models.Employee", "Emp_depndent")
                        .WithMany("dependents")
                        .HasForeignKey("Emp_ssn");

                    b.Navigation("Emp_depndent");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Employee", b =>
                {
                    b.HasOne("MVC_CRUDOperations.Models.Employee", "Super")
                        .WithMany("employees")
                        .HasForeignKey("SuperID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Super");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Project", b =>
                {
                    b.HasOne("MVC_CRUDOperations.Models.Department", "department")
                        .WithMany("dept_projects")
                        .HasForeignKey("Number")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Work_For", b =>
                {
                    b.HasOne("MVC_CRUDOperations.Models.Employee", "employee")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("employeeSsn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_CRUDOperations.Models.Project", "project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("projectName", "projectNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("project");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Department", b =>
                {
                    b.Navigation("department_locations");

                    b.Navigation("dept_projects");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Employee", b =>
                {
                    b.Navigation("EmployeeProject");

                    b.Navigation("dependents");

                    b.Navigation("employees");
                });

            modelBuilder.Entity("MVC_CRUDOperations.Models.Project", b =>
                {
                    b.Navigation("EmployeeProject");
                });
#pragma warning restore 612, 618
        }
    }
}
